{"ast":null,"code":"import _classCallCheck from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/antkeo/Code/project/streams/src/Components/streams/StreamCreate.js\";\nimport React from 'react'; // Field is react component created in redux-form\n// reduxForm is function simular to connect function\n// with it we will be able to call action creators and\n// get form data into our component\n\nimport { connect } from 'react-redux';\nimport { createStream } from '../../Actions';\nimport StreamForm from '../StreamForm';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSubmit = function (formValues) {\n      _this.props.createStream(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component); // to make sure input is filled in and deal with error\n\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    // only run if user didnt enter title\n    errors.title = 'Please Enter title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'Please Enter description';\n  }\n\n  return errors;\n};\n\nvar formWrapped = reduxForm({\n  form: 'StreamCreate',\n  validate: validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream: createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/antkeo/Code/project/streams/src/Components/streams/StreamCreate.js"],"names":["React","connect","createStream","StreamForm","StreamCreate","onSubmit","formValues","props","handleSubmit","renderInput","Component","validate","errors","title","description","formWrapped","reduxForm","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,UAAP,MAAuB,eAAvB;;IAEMC,Y;;;;;;;;;;;;;;;;;;UAGJC,Q,GAAW,UAACC,UAAD,EAAgB;AACzB,YAAKC,KAAL,CAAWL,YAAX,CAAwBI,UAAxB;AACD,K;;;;;;;6BAEQ;AACP,aACE;AAAM,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKH,QAA7B,CAAhB;AACM,QAAA,SAAS,EAAC,eADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKI,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CADF;AAQD;;;;EAhBwBT,KAAK,CAACU,S,GAmBjC;;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAL,UAAU,EAAI;AAC7B,MAAMM,MAAM,GAAG,EAAf;;AACA,MAAG,CAACN,UAAU,CAACO,KAAf,EAAsB;AACpB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,oBAAf;AACD;;AAED,MAAI,CAACP,UAAU,CAACQ,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,0BAArB;AACD;;AAED,SAAOF,MAAP;AACD,CAZD;;AAcA,IAAMG,WAAW,GAAGC,SAAS,CAAC;AAC5BC,EAAAA,IAAI,EAAC,cADuB;AAE5BN,EAAAA,QAAQ,EAARA;AAF4B,CAAD,CAAT,CAGjBP,YAHiB,CAApB;AAKA,eAAeH,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA,YAAY,EAAZA;AAAF,CAAP,CAAP,CAA+Ba,WAA/B,CAAf","sourcesContent":["import React from 'react'\n// Field is react component created in redux-form\n// reduxForm is function simular to connect function\n// with it we will be able to call action creators and\n// get form data into our component\nimport {connect} from 'react-redux'\nimport { createStream } from '../../Actions'\nimport StreamForm from '../StreamForm'\n\nclass StreamCreate extends React.Component {\n\n  // api request\n  onSubmit = (formValues) => {\n    this.props.createStream(formValues)\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit(this.onSubmit)}\n            className='ui form error'>\n        <Field name='title' component={this.renderInput} label='Enter title'/>\n        <Field name='description' component={this.renderInput} label='Enter description' />\n        <button className='ui button primary'>Submit</button>\n      </form>\n    )\n  }\n}\n\n// to make sure input is filled in and deal with error\nconst validate = formValues => {\n  const errors = {}\n  if(!formValues.title) {\n    // only run if user didnt enter title\n    errors.title = 'Please Enter title'\n  }\n\n  if (!formValues.description) {\n    errors.description = 'Please Enter description'\n  }\n\n  return errors\n}\n\nconst formWrapped = reduxForm({\n  form:'StreamCreate',\n  validate\n})(StreamCreate)\n\nexport default connect(null, { createStream})(formWrapped)\n"]},"metadata":{},"sourceType":"module"}