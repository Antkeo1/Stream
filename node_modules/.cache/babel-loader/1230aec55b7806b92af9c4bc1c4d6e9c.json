{"ast":null,"code":"import _classCallCheck from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/antkeo/Code/project/streams/src/Components/streams/StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../Actions';\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamShow, _React$Component);\n\n  function StreamShow(props) {\n    var _this;\n\n    _classCallCheck(this, StreamShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).call(this, props));\n\n    _this.buildPlayer = function () {\n      if (_this.player || !_this.props.stream) {\n        return;\n      }\n\n      var id = _this.props.match.params.id;\n      _this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n      });\n\n      _this.player.attachMediaElement(_this.videoRef.currrent);\n\n      _this.player.load();\n    };\n\n    _this.state = {\n      hasError: false\n    };\n    _this.videoRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchStream(this.props.match.params.id);\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.player.destroy();\n    } // to show video player\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      var _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, description));\n    }\n  }]);\n\n  return StreamShow;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/antkeo/Code/project/streams/src/Components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","props","buildPlayer","player","stream","id","match","params","createPlayer","type","url","attachMediaElement","videoRef","currrent","load","state","hasError","createRef","destroy","title","description","width","Component","mapStateToProps","ownProps","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,WAAT,QAA4B,eAA5B;;IAEMC,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;;AADiB,UAoBnBC,WApBmB,GAoBL,YAAM;AAClB,UAAI,MAAKC,MAAL,IAAe,CAAC,MAAKF,KAAL,CAAWG,MAA/B,EAAuC;AACrC;AACD;;AAHiB,UAKVC,EALU,GAKH,MAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MALd,CAKVF,EALU;AAMlB,YAAKF,MAAL,GAAcN,GAAG,CAACW,YAAJ,CAAiB;AAC7BC,QAAAA,IAAI,EAAE,KADuB;AAE7BC,QAAAA,GAAG,uCAAgCL,EAAhC;AAF0B,OAAjB,CAAd;;AAIA,YAAKF,MAAL,CAAYQ,kBAAZ,CAA+B,MAAKC,QAAL,CAAcC,QAA7C;;AACA,YAAKV,MAAL,CAAYW,IAAZ;AACD,KAhCkB;;AAEjB,UAAKC,KAAL,GAAa;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAb;AACA,UAAKJ,QAAL,GAAgBhB,KAAK,CAACqB,SAAN,EAAhB;AAHiB;AAIlB;;;;wCAEmB;AAClB,WAAKhB,KAAL,CAAWF,WAAX,CAAuB,KAAKE,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBF,EAA/C;AACA,WAAKH,WAAL;AACD;;;yCAEoB;AACnB,WAAKA,WAAL;AACD;;;2CAEsB;AACrB,WAAKC,MAAL,CAAYe,OAAZ;AACD,K,CAED;;;;6BAeS;AACP,UAAI,CAAC,KAAKjB,KAAL,CAAWG,MAAhB,EAAwB;AACtB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD;;AAHM,+BAKuB,KAAKH,KAAL,CAAWG,MALlC;AAAA,UAKCe,KALD,sBAKCA,KALD;AAAA,UAKQC,WALR,sBAKQA,WALR;AAOP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,GAAG,EAAE,KAAKR,QAAjB;AACO,QAAA,KAAK,EAAE;AAAES,UAAAA,KAAK,EAAE;AAAT,SADd;AAEO,QAAA,QAAQ,EAAE,IAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,KAAL,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,WAAL,CANF,CADF;AAUD;;;;EApDsBxB,KAAK,CAAC0B,S;;AAuD/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACR,KAAD,EAAQS,QAAR,EAAqB;AAC3C,SAAO;AAACpB,IAAAA,MAAM,EAAEW,KAAK,CAACU,OAAN,CAAcD,QAAQ,CAAClB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAT,GAAP;AACD,CAFD;;AAIA,eAAeP,OAAO,CAACyB,eAAD,EAAkB;AACtCxB,EAAAA,WAAW,EAAXA;AADsC,CAAlB,CAAP,CAEbC,UAFa,CAAf","sourcesContent":["import React from 'react'\nimport flv from 'flv.js'\nimport {connect} from 'react-redux'\nimport { fetchStream } from '../../Actions'\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {hasError: false}\n    this.videoRef = React.createRef()\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id)\n    this.buildPlayer()\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer()\n  }\n\n  componentWillUnmount() {\n    this.player.destroy()\n  }\n\n  // to show video player\n  buildPlayer = () => {\n    if (this.player || !this.props.stream) {\n      return\n    }\n\n    const { id } = this.props.match.params\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    })\n    this.player.attachMediaElement(this.videoRef.currrent)\n    this.player.load()\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>\n    }\n\n    const { title, description} = this.props.stream\n\n    return (\n      <div>\n        <video ref={this.videoRef}\n               style={{ width: '100%'}}\n               controls={true}\n        />\n        <h1>{title}</h1>\n        <h5>{description}</h5>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {stream: state.streams[ownProps.match.params.id]}\n}\n\nexport default connect(mapStateToProps, {\n  fetchStream}\n)(StreamShow)\n"]},"metadata":{},"sourceType":"module"}