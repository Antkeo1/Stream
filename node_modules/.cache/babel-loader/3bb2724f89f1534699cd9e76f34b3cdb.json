{"ast":null,"code":"import _classCallCheck from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/antkeo/Code/project/streams/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/antkeo/Code/project/streams/src/Components/streams/StreamCreate.js\";\nimport React from 'react'; // Field is react component created in redux-form\n// reduxForm is function simular to connect function\n// with it we will be able to call action creators and\n// get form data into our component\n\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      console.log(meta);\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, meta.error));\n    };\n\n    _this.onSubmit = function (formValues) {\n      console.log(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"desciption\",\n        component: this.renderInput,\n        label: \"Enter desiption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component); // to make sure input is filled in and deal with error\n\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    // only run if user didnt enter title\n    errors.title = 'Enter title';\n  }\n\n  if (!formValues.desiption) {\n    errors.desiption = 'Enter desiption';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'StreamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/antkeo/Code/project/streams/src/Components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","renderInput","input","label","meta","console","log","error","onSubmit","formValues","props","handleSubmit","Component","validate","errors","title","desiption","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;;AACA,SAAQC,KAAR,EAAeC,SAAf,QAAgC,YAAhC;;IAEMC,Y;;;;;;;;;;;;;;;;;;UACJC,W,GAAc,gBAA0B;AAAA,UAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,UAAjBC,KAAiB,QAAjBA,KAAiB;AAAA,UAAVC,IAAU,QAAVA,IAAU;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADA,EAEE,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAME,IAAI,CAACG,KAAX,CAHF,CADF;AAOD,K;;UAEDC,Q,GAAW,UAACC,UAAD,EAAgB;AACzBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ;AACD,K;;;;;;;6BAEQ;AACP,aACE;AAAM,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKH,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKP,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,SAAS,EAAE,KAAKA,WAAzC;AAAsD,QAAA,KAAK,EAAC,iBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CADF;AAOD;;;;EAxBwBJ,KAAK,CAACe,S,GA2BjC;;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACJ,UAAD,EAAgB;AAC/B,MAAMK,MAAM,GAAG,EAAf;;AACA,MAAG,CAACL,UAAU,CAACM,KAAf,EAAsB;AACpB;AACAD,IAAAA,MAAM,CAACC,KAAP,GAAe,aAAf;AACD;;AAED,MAAI,CAACN,UAAU,CAACO,SAAhB,EAA2B;AACzBF,IAAAA,MAAM,CAACE,SAAP,GAAmB,iBAAnB;AACD;;AAED,SAAOF,MAAP;AACD,CAZD;;AAcA,eAAef,SAAS,CAAC;AACvBkB,EAAAA,IAAI,EAAC,cADkB;AAEvBJ,EAAAA,QAAQ,EAARA;AAFuB,CAAD,CAAT,CAGZb,YAHY,CAAf","sourcesContent":["import React from 'react'\n// Field is react component created in redux-form\n// reduxForm is function simular to connect function\n// with it we will be able to call action creators and\n// get form data into our component\nimport {Field, reduxForm } from 'redux-form'\n\nclass StreamCreate extends React.Component {\n  renderInput = ({input, label, meta}) => {\n    console.log(meta)\n    return (\n      <div className='field'>\n      <label>{label}</label>\n        <input {...input} />\n        <div>{meta.error}</div>\n      </div>\n    )\n  }\n\n  onSubmit = (formValues) => {\n    console.log(formValues)\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form'>\n        <Field name='title' component={this.renderInput} label='Enter title'/>\n        <Field name='desciption' component={this.renderInput} label='Enter desiption' />\n        <button className='ui button primary'>Submit</button>\n      </form>\n    )\n  }\n}\n\n// to make sure input is filled in and deal with error\nconst validate = (formValues) => {\n  const errors = {}\n  if(!formValues.title) {\n    // only run if user didnt enter title\n    errors.title = 'Enter title'\n  }\n\n  if (!formValues.desiption) {\n    errors.desiption = 'Enter desiption'\n  }\n\n  return errors\n}\n\nexport default reduxForm({\n  form:'StreamCreate',\n  validate\n})(StreamCreate)\n"]},"metadata":{},"sourceType":"module"}